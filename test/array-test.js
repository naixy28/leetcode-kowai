/*************** Array type questions **************/

const arrayCode = require('../src/array')

describe('moveZeroes', () => {
  const moveZeroes = arrayCode.moveZeroes
  
  test('[0]', () => {
    const nums = [0]

    moveZeroes(nums)
    expect(nums)
      .toEqual([0])
  })
  test('[0, 2, 1, 0, 0, 9]', () => {
    const nums = [0, 2, 1, 0, 0, 9]

    moveZeroes(nums)
    expect(nums)
      .toEqual([2, 1, 9, 0, 0, 0])
  })
})

describe('twoSum', () => {
  const twoSum = arrayCode.twoSum
  
  test('[2, 7, 11, 15]', () => {
    const nums = [2, 7, 11, 15]
    const target = 9

    expect(twoSum(nums, target))
      .toEqual([0, 1])
    expect(twoSum(nums, 18))
      .toEqual([1, 2])

  })
})

describe('isValidSudoku', () => {
  const isValidSudoku = arrayCode.isValidSudoku
  
  test('invalid sudoku', () => {
    const board = [
      ["5","3",".","5","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]
    const board2 = [
      ["8","3",".",".","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]
    const board3 = [
      ["5","3",".",".","7",".",".",".","."],
      ["6",".","3","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]

    expect(isValidSudoku(board))
      .toEqual(false)
    expect(isValidSudoku(board2))
      .toEqual(false)
    expect(isValidSudoku(board3))
      .toEqual(false)

  })

  test('valid sudoku', () => {
    const board = [
      ["5","3",".",".","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]

    expect(isValidSudoku(board))
      .toEqual(true)
  })
})

describe('rotate', () => {
  const rotate = arrayCode.rotate

  test('rotate', () => {
    const matrix = 
    [
      [1,2,3],
      [4,5,6],
      [7,8,9]
    ]

    const rMatrix = [
      [7,4,1],
      [8,5,2],
      [9,6,3]
    ]

    rotate(matrix)

    expect(matrix).toEqual(rMatrix)
  })
  
})